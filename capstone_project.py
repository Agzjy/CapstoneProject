# -*- coding: utf-8 -*-
"""Capstone Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rmOYiBL6-2kmIUdg2vjzoBg_WbB_7Vaq
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import scipy.stats as stats
from sklearn import preprocessing
# %matplotlib inline
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
from sklearn.feature_selection import SequentialFeatureSelector as sfs
from sklearn.metrics import explained_variance_score
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score
from scipy import stats
from scipy.stats import linregress
import textwrap

from google.colab import drive
drive.mount('/content/drive')

#import dataset
train = pd.read_csv('/content/drive/MyDrive/release_train_patients.csv')
validate = pd.read_csv('/content/drive/MyDrive/release_validate_patients.csv')
test = pd.read_csv('/content/drive/MyDrive/release_test_patients.csv')

train.head()

train.describe()

train.shape

Y = train['PATHOLOGY']
train.drop('DIFFERENTIAL_DIAGNOSIS', axis=1, inplace=True)

"""### Handling Missing Values"""

train.isna().sum()

"""### Removing Duplicate Records"""

train.duplicated().sum()

train = train.drop_duplicates()

"""### Filtering Outliers"""

def evidence_to_list(df):
    evidences = []
    for evidence_row in df['EVIDENCES']:
        evidences.append([evidence.strip(" ''") for evidence in evidence_row.strip("[]").split(",") ])
    df['EVIDENCES'] = evidences
    return df
train = evidence_to_list(train)
num_evidences = [len(evidence) for evidence in train['EVIDENCES']]

plt.boxplot(num_evidences, patch_artist=True, boxprops=dict(facecolor='lightyellow'))

plt.xlabel('Num Evidences')
plt.ylabel('Values')
plt.title('Boxplot of Num Evidences')

plt.show()

databox = pd.DataFrame({
    'Train': train['AGE'],
    'Validate': validate['AGE'],
    'Test': test['AGE'],
})

databox_long = pd.melt(databox, var_name='Dataset', value_name='Age')

plt.figure(figsize=(5, 6))
sns.boxplot(x='Dataset', y='Age', hue='Dataset', data=databox_long,
            palette=['pink', 'lightgreen', 'lightblue'], legend=False)
plt.title('Boxplot of Age')

plt.show()

train['SEX'].unique()

train['PATHOLOGY'].count()



"""### Correcting Typographical Errors"""

import json

pathology_dict = json.load(open('/content/drive/MyDrive/release_conditions.json', 'r'))
evidences_dict = json.load(open('/content/drive/MyDrive/release_evidences.json', 'r'))

def check_typo(df):
    for n, i in df.iterrows():
        if i['PATHOLOGY'] not in pathology_dict.keys():
            print(f"{n} has a typo in pathology: {i['PATHOLOGY']}")
        for evidence in i['EVIDENCES']:
            evidence_split = evidence.split('_@_')
            question = evidence_split[0]
            if question not in evidences_dict.keys():
                print(f'{n} has a typo in question: {evidence}')
                continue
            if len(evidence_split) > 1:
                value = evidence_split[1]
                if value not in evidences_dict[question]["possible-values"] \
                    and value not in [str(e) for e in evidences_dict[question]["possible-values"]]:
                    print(f'{n} has a typo in value: {evidence}')

check_typo(train)



"""# Data ENCODING"""

train['SEX'] = train['SEX'].map({'M': 0, 'F': 1})

train2=train.copy()

def one_hot_encode(df):
    unique_items = set(item for sublist in df['EVIDENCES'] for item in sublist)
    encoded_evidence = pd.DataFrame(0, index=df.index, columns=list(unique_items))
    for item in unique_items:
        encoded_evidence[item] = df['EVIDENCES'].apply(lambda x: item in x)
    return encoded_evidence.astype(int)

encoded_train = one_hot_encode(train)

train = train.drop('EVIDENCES', axis=1).join(encoded_train)



"""# EDA"""

import matplotlib.pyplot as plt

data = train['AGE']

plt.figure(figsize=(6, 6))
plt.hist(data, bins=20, edgecolor='black', color='skyblue')
plt.title('Age Distribution')
plt.xlabel('Age')
plt.ylabel('Frequency')
# plt.grid(True)
plt.tight_layout()
plt.show()

data = train['PATHOLOGY'].value_counts().nlargest(5)
categories = data.index
values = data.values
plt.figure(figsize=(8, 4))
wrapped_categories = ['\n'.join(textwrap.wrap(text, 30)) for text in categories]
colors = ['pink', 'lightgreen', 'lightblue', 'orange', 'lightcoral']
plt.barh(wrapped_categories, values, edgecolor='black', color=colors)
plt.title('Top 5 PATHOLOGY Distribution')
plt.xlabel('Frequency')
plt.ylabel('PATHOLOGY')
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt
data2 = train['SEX']
sex_counts = data2.value_counts()
plt.figure(figsize=(3, 4))
plt.bar(sex_counts.index, sex_counts.values, color=['lightcoral', 'lightcyan'], edgecolor='black')
plt.title('Sex Distribution')
plt.xlabel('Sex')
plt.ylabel('Count')
plt.tight_layout()
plt.show()

train['AGE'] = train['AGE'].astype(float)
average_age = train.groupby('PATHOLOGY')['AGE'].mean().reset_index()

# sort the average age
average_age_sorted = average_age.sort_values('AGE', ascending=False)

# Visualize the data
plt.figure(figsize=(10, 6))
sns.barplot(data=average_age, x='PATHOLOGY', y='AGE', order=average_age_sorted['PATHOLOGY'])
plt.title('Average Age per Pathology')
plt.xticks(rotation=90, fontsize=5)
plt.xlabel('Pathology')
plt.ylabel('Average Age')
plt.tight_layout()
plt.show()

pathology_evidences = encoded_train.groupby(train['PATHOLOGY']).mean()

from sklearn.metrics.pairwise import cosine_similarity

similarity = pd.DataFrame(cosine_similarity(pathology_evidences), index=pathology_evidences.index, columns=pathology_evidences.index)

from scipy.cluster.hierarchy import dendrogram, linkage, cut_tree
plt.rcParams["figure.figsize"] = (16, 9)
plt.rcParams["figure.dpi"] = 100
linkage_data = linkage(pathology_evidences, method='ward', metric='euclidean')
dendrogram(linkage_data, labels=pathology_evidences.index, orientation='right')
plt.show()

sns.heatmap(similarity, xticklabels=False, yticklabels=True)
plt.title('Pathology Similarity')
plt.show()